
# Django предоставляет следующие вспомогательные функции, которые по-
# зволяют легко создавать шаблонные теги:
# •• simple_tag: обрабатывает предоставленные данные и возвращает стро-
# ковый литерал;
# •• inclusion_tag: обрабатывает предоставленные данные и возвращает
# прорисованный шаблон.

# Мы создали простой шаблонный тег, который возвращает число опубликованных в блоге постов.
# Для того чтобы быть допустимой библиотекой тегов, в каждом содержащем
# шаблонные теги модуле должна быть определена переменная с именем register.
# Эта переменная является экземпляром класса template.Library, и она
# используется для регистрации шаблонных тегов и фильтров приложения.
# В приведенном выше исходном коде тег total_posts был определен с помощью
# простой функции Python. В функцию был добавлен декоратор @register.
# simple_tag, чтобы зарегистрировать ее как простой тег. Django будет
# использовать имя функции в качестве имени тега. Если есть потребность за-
# регистрировать ее под другим именем, то это можно сделать, указав атрибут
# name, например @register.simple_tag(name='my_tag').


from django import template
from ..models import Post
from django.db.models import Count

register = template.Library()

@register.simple_tag
def total_posts():
    return Post.published.count()


@register.inclusion_tag('blog/post/latest_posts.html')
def show_latest_posts(count=5):
    latest_posts = Post.published.order_by('-publish')[:count]
    return {'latest_posts': latest_posts}


# В приведенном выше шаблонном теге с помощью
# функции annotate() формируется набор запросов QuerySet, чтобы агрегировать общее число ком-
# ментариев к каждому посту. Функция агрегирования Count используется для
# сохранения количества комментариев в вычисляемом поле total_comments по
# каждому объекту Post. Набор запросов QuerySet упорядочивается по вычисляемому
# полю в убывающем порядке. Также предоставляется опциональная
# переменная count, чтобы ограничивать общее число возвращаемых объектов.
@register.simple_tag
def get_most_commented_posts(count=5):
    return Post.published.annotate(total_comments=Count('comments')
                                   ).order_by('-total_comments')[:count]




# Шаблонные фильтры регистрируются таким же образом, как и шаблонные теги.
# Во избежание конфликта имен между именем функции и модулем
# markdown мы дали функции имя markdown_format, а фильтру – имя markdown для
# использования в шаблонах, в частности  variable|markdown .
# Django экранирует генерируемый фильтрами исходный код HTML; символы
# HTML-сущностей заменяются их кодированными в HTML символами.
# Например, <p> преобразовывается в &lt;p&gt; (символ меньше, символ p, символ больше).
# Мы используем предоставляемую веб-фреймворком Django функцию
# mark_safe, чтобы помечать результат как безопасный для прорисовки в шаблоне
# исходный код HTML. По умолчанию Django не будет доверять никакому
# исходному коду HTML и будет экранировать его перед его вставкой
# в результат. Единственными исключениями являются переменные, которые
# помечены как безопасные, чтобы тем самым избежать экранирования. Такое
# поведение не дает Django выводить потенциально опасный исходный код
# HTML и позволяет создавать исключения, дабы возвращать безопасный исходный код HTML.

from django.utils.safestring import mark_safe
import markdown
@register.filter(name='markdown')
def markdown_format(text):
    return mark_safe(markdown.markdown(text))